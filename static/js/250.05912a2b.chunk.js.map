{"version":3,"file":"static/js/250.05912a2b.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactListEl = styled.ul`\n  width: 1370px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  list-style: none;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 0;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 140px;\n  height: 150px;\n  border: 1px solid #39bb96;\n  padding: 10px;\n  text-align: center;\n  border-radius: 5px;\n`;\n\nexport const ContactItemHeader = styled.h2`\n  margin: 0;\n  margin-bottom: auto;\n`;\n\nexport const ContactItemText = styled.p`\n  margin: 0;\n  font-weight: 600;\n  color: #0b5e18;\n`;\n\nexport const ContactItemButton = styled.button`\n  width: 100px;\n  background-color: #39bb96;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  margin-top: auto;\n  padding: 5px;\n`;\n","export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n","import {\n  ContactListEl,\n  ContactListItem,\n  ContactItemHeader,\n  ContactItemText,\n  ContactItemButton,\n} from 'components/ContactList/ContactList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectAllContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n\n  const getNeeddedCard = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteCard = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const neededCards = getNeeddedCard();\n\n  return (\n    <ContactListEl>\n      {neededCards.map(({ name, number, id }) => {\n        return (\n          <ContactListItem key={id}>\n            <ContactItemHeader>{name}</ContactItemHeader>\n            <ContactItemText>{number}</ContactItemText>\n            <ContactItemButton\n              type=\"button\"\n              onClick={() => {\n                deleteCard(id);\n              }}\n            >\n              Delete\n            </ContactItemButton>\n          </ContactListItem>\n        );\n      })}\n    </ContactListEl>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const FilterInput = styled.input`\n  font-size: 16px;\n  width: 300px;\n  height: 30px;\n  margin-bottom: 15px;\n  padding: 5px;\n  border-radius: 5px;\n  outline-color: #5edcb0;\n  border-color: #0aab7e;\n  font-weight: 700;\n`;\n\nexport const FilterLabel = styled.label`\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: #057858;\n`;\n","import {\n  FilterWrapper,\n  FilterInput,\n  FilterLabel,\n} from 'components/Filter/Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = e => {\n    dispatch(updateFilter(e.currentTarget.value));\n  };\n\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor=\"text\">Find contacts by name</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onFilterChange}\n      />\n    </FilterWrapper>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const InputEl = styled(Field)`\n  font-size: 16px;\n  width: 300px;\n  height: 30px;\n  margin-bottom: 15px;\n  padding: 5px;\n  border-radius: 5px;\n  outline-color: #5edcb0;\n  border-color: #0aab7e;\n  font-weight: 700;\n`;\n\nexport const Label = styled.label`\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: #057858;\n`;\n\nexport const SubmitButton = styled.button`\n  width: 150px;\n  height: 40px;\n  background-color: #39bb96;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: 700;\n  cursor: pointer;\n  outline-color: #504e4e;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  width: 300px;\n  text-align: center;\n  color: red;\n  margin-bottom: 15px;\n  font-weight: 500;\n  font-size: 16px;\n`;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\n// import { nanoid } from 'nanoid';\nimport {\n  FormEl,\n  InputEl,\n  Label,\n  SubmitButton,\n  Error,\n} from 'components/ContactForm/ContactForm.styled';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .min(4)\n    .max(10)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectAllContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const dublicateContact = findDublicateContact(values, items);\n\n    if (dublicateContact) {\n      alert(`${values.name} is already in contacts`);\n    } else {\n      dispatch(addContact(values));\n\n      resetForm();\n    }\n  };\n\n  const findDublicateContact = (contact, items) => {\n    return items.find(\n      item => item.name.toLowerCase() === contact.name.toLowerCase()\n    );\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormEl autoComplete=\"off\">\n        <Label htmlFor=\"name\">Name</Label>\n        <InputEl type=\"text\" name=\"name\" placeholder=\"Enter name\" />\n        <Error name=\"name\" component=\"div\" />\n\n        <Label htmlFor=\"number\">Number</Label>\n        <InputEl type=\"tel\" name=\"number\" placeholder=\"Enter phone number\" />\n        <Error name=\"number\" component=\"div\" />\n        <SubmitButton type=\"submit\">Add contact</SubmitButton>\n      </FormEl>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.main`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const LoadingMessage = styled.div`\n  font-size: 15px;\n  font-weight: 700;\n  text-align: center;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectLoading,\n  selectError,\n  selectAllContacts,\n} from 'redux/contacts/selectors';\n\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Container } from 'pages/Contacts/Contacts.styled';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const items = useSelector(selectAllContacts);\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {items.length > 0 && (\n        <>\n          <h2>Contacts</h2>\n          <Filter />\n        </>\n      )}\n      {isLoading && !error && <Spinner />}\n      <ContactList />\n\n      {error && <p> {error} </p>}\n    </Container>\n  );\n}\n"],"names":["ContactListEl","styled","ContactListItem","ContactItemHeader","ContactItemText","ContactItemButton","selectLoading","state","contacts","isLoading","selectFilter","filter","selectAllContacts","items","selectError","error","ContactList","dispatch","useDispatch","useSelector","neededCards","normalizedFilter","toLowerCase","contact","name","includes","getNeeddedCard","map","number","id","type","onClick","contactId","deleteContact","FilterWrapper","FilterInput","FilterLabel","Filter","htmlFor","value","onChange","e","updateFilter","currentTarget","FormEl","Form","InputEl","Field","Label","SubmitButton","Error","ErrorMessage","schema","yup","shape","matches","required","min","max","initialValues","ContactForm","findDublicateContact","find","item","validationSchema","onSubmit","values","resetForm","alert","addContact","autoComplete","placeholder","component","Container","Contacts","useEffect","fetchContacts","length","Spinner"],"sourceRoot":""}